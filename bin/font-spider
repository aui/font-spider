#!/usr/bin/env node

'use strict';

var fs = require('fs');
var path = require('path');

var program = require('commander');
var glob = require('glob');
var colors = require('colors/safe');
var util = require('util');

var Adapter = require('../src/adapter');
var fontSpider = require('../');
var spider = fontSpider.spider;
var compressor = fontSpider.compressor;

program
    .version(require('../package.json').version)
    .usage('[options] <htmlFile ...>')
    .option('--info', 'show only webfont information')
    .option('--ignore <pattern>', 'ignore the files', list)
    .option('--map <remotePath,localPath>', 'mapping the remote path to the local', toMap)
    .option('--no-backup', 'do not back up fonts')
    .option('--debug', 'enable debug mode')
    .parse(process.argv);


var htmlFiles = program.args;
var options = new Adapter({
    resourceBeforeLoad: function(file) {
        logIn('Load:', colors.cyan(file));
    }
});



if (!htmlFiles.length) {
    program.help();
    process.exit(1);
} else {
    htmlFiles = htmlFiles.map(function(file) {
        if (/https?/.test(file)) {
            return [file];
        } else {
            file = path.resolve(file);
            return glob.sync(file);
        }
    });
    htmlFiles = reduce(htmlFiles);
}


// 合并配置项目
Object.keys(program).forEach(function(key) {
    if (key in options) {
        options[key] = program[key];
    }
});

if (program.debug) {
    options.silent = false;
}


if (program.info) {
    showWebFont(htmlFiles, options);
} else {
    compressWebFont(htmlFiles, options);
}



function list(args) {
    return args.split(/\s?,\s?/);
}

function toMap(args) {
    args = list(args);

    var map = [];
    var p = 2;
    var n = args.length / p;
    for (var i = 0; i < n; i++) {
        map.push([
            args[p * i],
            args[p * i + 1]
        ]);
    }

    return map;
}

// 扁平化二维数组
function reduce(array) {
    var ret = [];

    array.forEach(function(item) {
        ret.push.apply(ret, item);
    });

    return ret;
}



function onerror(errors) {
    clearLonIn();

    var message = 'Error: ' + errors.message;
    var stack = errors.stack.toString();

    stack = stack.split('\n');
    stack.shift();
    stack = stack.join('\n');

    if (process.stderr.isTTY) {
        message = colors.red(message);
        stack = colors.grey(stack);
    }

    stderr(message);
    stderr(stack);

    // 可能有异步 http 任务运行，强制中断
    process.exit(1);
}



// 显示 webFont 信息
function showWebFont(htmlFiles, options) {

    logIn('Loading ..');

    spider(htmlFiles, options).then(function(webFonts) {

        webFonts = JSON.stringify(webFonts, null, 4);
        clearLonIn();

        if (process.stdout.isTTY) {
            webFonts = JSON.parse(webFonts);
            webFonts = util.inspect(webFonts, {
                colors: true,
                depth: null
            });
        }

        stdout(webFonts);

    }).catch(onerror);
}



// 压缩 webFont
function compressWebFont(htmlFiles, options) {

    logIn('Loading ..');

    spider(htmlFiles, options).then(function(webFonts) {

        if (webFonts.length === 0) {
            clearLonIn();
            log('<web font not found>');
            return;
        }

        logIn('Loading ...');

        return compressor(webFonts, options);
    }).then(function(webFonts) {

        clearLonIn();
        webFonts.forEach(function(webFont) {

            log('Font family:', colors.green(webFont.family));
            log('Original size:', colors.green(webFont.originalSize / 1000 + ' KB'));
            log('Include chars:', webFont.chars);
            log('Font id:', webFont.id);
            log('CSS selectors:', webFont.selectors.join(', '));
            log('Font files:');

            webFont.files.forEach(function(file) {
                if (fs.existsSync(file.source)) {
                    log('File', colors.cyan(path.relative('./', file.source)),
                        'created:', colors.green(file.size / 1000 + ' KB'));
                } else {
                    log(colors.red('File ' + path.relative('./', file.source) + ' not created'));
                }
            });

            log('');
        });

        return webFonts;
    }).catch(onerror);
}

// 标准终端输出
function stdout(message) {
    process.stdout.write(message + '\n');
}


// 错误输出
function stderr(message) {
    process.stdout.write(message + '\n');
}


// 输出日志
function log() {
    if (process.stdout.isTTY) {
        process.stdout.write(Array.prototype.join.call(arguments, ' ') + '\n');
    }
}

// 输出一行内可被覆盖的日志
function logIn() {
    if (process.stdout.isTTY) {
        var message = Array.prototype.join.call(arguments, ' ');
        if (!program.debug) {
            process.stdout.clearLine();
            process.stdout.cursorTo(0);
            process.stdout.write(message);
        } else {
            process.stdout.write(message + '\n');
        }

    }
}

// 清除单行日志
function clearLonIn() {
    logIn('');
}